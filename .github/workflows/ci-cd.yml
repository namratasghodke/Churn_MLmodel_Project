name: MLOps CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-train-monitor-deploy:
    runs-on: ubuntu-latest

    env:
      MLFLOW_TRACKING_URI: http://127.0.0.1:5000
      MLFLOW_EXPERIMENT_NAME: churn-prediction-namrata
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Set up Git config
        run: |
          git config --global user.email "namratasghodke@gmail.com"
          git config --global user.name "namratasghodke"

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set up DVC
        uses: iterative/setup-dvc@v1

      - name: Pull data from DVC remote
        run: dvc pull -f
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Start MLflow Tracking Server in background
        run: |
          nohup mlflow server \
            --backend-store-uri sqlite:///mlflow.db \
            --default-artifact-root ./mlruns \
            --host 127.0.0.1 \
            --port 5000 > mlflow.log 2>&1 &

      - name: Wait for MLflow server to start
        run: sleep 10

      - name: Run Training
        run: python src/training/train.py

      - name: Run Monitoring
        run: PYTHONPATH=src python -m monitoring.monitor

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Debug directory structure
        run: |
          ls -R
          ls -la docker/inference

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/churn-new-namrata -f docker/inference/Dockerfile .

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/churn-new-namrata

      # === EKS Deployment & Monitoring ===

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/v1.30.0/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Install eksctl
        run: |
          curl --silent --location "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin/

      - name: Update kubeconfig for EKS
        run: eksctl utils write-kubeconfig --cluster churn-eks --region us-east-1

      - name: Deploy Application to EKS
        run: |
          kubectl apply -f src/k8s/deployment.yaml
          kubectl apply -f src/k8s/service.yaml
          kubectl apply -f src/k8s/hpa.yaml
          kubectl get all

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Install Prometheus and Grafana
        run: |
          cd src/prometheus
          chmod +x install-monitoring.sh
          ./install-monitoring.sh

      - name: Verify monitoring pods and services
        run: |
          kubectl get pods -n monitoring
          kubectl get svc -n monitoring

      - name: Apply ServiceMonitor
        run: kubectl apply -f src/prometheus/servicemonitor.yaml

      # Optional: Port-forward Grafana dashboard (only for local use)
      # - name: Port Forward Grafana
      #   run: |
      #     nohup kubectl port-forward -n monitoring svc/prometheus-grafana 3000:80 > grafana.log 2>&1 &
